package me.bookpay.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import me.bookpay.greendao.Consume;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table CONSUME.
*/
public class ConsumeDao extends AbstractDao<Consume, Long> {

    public static final String TABLENAME = "CONSUME";

    /**
     * Properties of entity Consume.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Detail_Id = new Property(1, String.class, "detail_Id", false, "DETAIL__ID");
        public final static Property TypeIcon = new Property(2, String.class, "typeIcon", false, "TYPE_ICON");
        public final static Property TypeName = new Property(3, String.class, "typeName", false, "TYPE_NAME");
        public final static Property TypeID = new Property(4, String.class, "typeID", false, "TYPE_ID");
        public final static Property Pic_Ids = new Property(5, String.class, "pic_Ids", false, "PIC__IDS");
        public final static Property Money = new Property(6, String.class, "money", false, "MONEY");
        public final static Property StarDate = new Property(7, String.class, "starDate", false, "STAR_DATE");
        public final static Property EndDate = new Property(8, String.class, "endDate", false, "END_DATE");
        public final static Property City = new Property(9, String.class, "city", false, "CITY");
        public final static Property Count = new Property(10, Integer.class, "count", false, "COUNT");
        public final static Property Description = new Property(11, String.class, "description", false, "DESCRIPTION");
    };


    public ConsumeDao(DaoConfig config) {
        super(config);
    }
    
    public ConsumeDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'CONSUME' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'DETAIL__ID' TEXT," + // 1: detail_Id
                "'TYPE_ICON' TEXT," + // 2: typeIcon
                "'TYPE_NAME' TEXT," + // 3: typeName
                "'TYPE_ID' TEXT," + // 4: typeID
                "'PIC__IDS' TEXT," + // 5: pic_Ids
                "'MONEY' TEXT," + // 6: money
                "'STAR_DATE' TEXT," + // 7: starDate
                "'END_DATE' TEXT," + // 8: endDate
                "'CITY' TEXT," + // 9: city
                "'COUNT' INTEGER," + // 10: count
                "'DESCRIPTION' TEXT);"); // 11: description
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'CONSUME'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Consume entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String detail_Id = entity.getDetail_Id();
        if (detail_Id != null) {
            stmt.bindString(2, detail_Id);
        }
 
        String typeIcon = entity.getTypeIcon();
        if (typeIcon != null) {
            stmt.bindString(3, typeIcon);
        }
 
        String typeName = entity.getTypeName();
        if (typeName != null) {
            stmt.bindString(4, typeName);
        }
 
        String typeID = entity.getTypeID();
        if (typeID != null) {
            stmt.bindString(5, typeID);
        }
 
        String pic_Ids = entity.getPic_Ids();
        if (pic_Ids != null) {
            stmt.bindString(6, pic_Ids);
        }
 
        String money = entity.getMoney();
        if (money != null) {
            stmt.bindString(7, money);
        }
 
        String starDate = entity.getStarDate();
        if (starDate != null) {
            stmt.bindString(8, starDate);
        }
 
        String endDate = entity.getEndDate();
        if (endDate != null) {
            stmt.bindString(9, endDate);
        }
 
        String city = entity.getCity();
        if (city != null) {
            stmt.bindString(10, city);
        }
 
        Integer count = entity.getCount();
        if (count != null) {
            stmt.bindLong(11, count);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(12, description);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Consume readEntity(Cursor cursor, int offset) {
        Consume entity = new Consume( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // detail_Id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // typeIcon
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // typeName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // typeID
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // pic_Ids
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // money
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // starDate
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // endDate
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // city
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10), // count
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11) // description
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Consume entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDetail_Id(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTypeIcon(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTypeName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTypeID(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPic_Ids(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setMoney(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setStarDate(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setEndDate(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setCity(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setCount(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
        entity.setDescription(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Consume entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Consume entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
